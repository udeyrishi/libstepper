#!/usr/bin/env python

__metaclass__ = type

PROJECT = 'libstepper'

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class Runner:
    def __init__(self, command=None):
        self.__commands = []
        self.last = None
        self.interrupted = False
        if command != None:
            self.then(command)

    def then(self, command, stdout=True):
        self.__commands.append((command, stdout))
        return self

    def run(self):
        self.last = None
        self.interrupted = False

        import subprocess
        import os

        result = True
        for c, stdout in self.__commands:
            self.last = str(c)
            try:
                if (callable(c)):
                    result &= c()
                else:
                    call_args = c.strip().split()
                    if stdout:
                        result &= (subprocess.call(call_args) == 0)
                    else:
                        result &= (subprocess.call(call_args, stdout=open(os.devnull, 'w'), stderr=subprocess.STDOUT) == 0)
            except KeyboardInterrupt:
                # passed onto child automatically
                self.interrupted = True
                return False

            if not result:
                break
        return result


def main(debug, clean, all, run):
    import os
    import sys
    platform = 'linux' if sys.platform in ('linux', 'linux2') else sys.platform
    which_cmd = 'where' if platform == 'win32' else 'which'

    if platform == 'win32':
        print(Colors.WARNING + Colors.UNDERLINE + 'Your current platform seems to be Windows. Project should still compile (at least the core), although it is not officially supported.' + Colors.ENDC)

    project_root = os.path.dirname(os.path.realpath(__file__))
    flavour = 'debug' if debug else 'release'
    out = os.path.join(project_root, 'out', platform, flavour)

    call = Runner()                                                                        \
        .then('{0} cmake'.format(which_cmd), stdout=False)                                 \
        .then('{0} make'.format(which_cmd), stdout=False)

    if clean:
        call.then('rm -rf {0}'.format(out))
    call                                                                                   \
        .then('mkdir -p {0}'.format(out))                                                  \
        .then(lambda: os.chdir(out) == None)                                               \
        .then('cmake -DCMAKE_BUILD_TYPE={0} {1}'.format(flavour, project_root))            \

    if all:
        call.then('make')
        if run:
            call.then(os.path.join(out, 'bin', '{}-test'.format(PROJECT)))
    else:
        call.then('make {}'.format(PROJECT))

    succeeded = call.run()
    if not succeeded and not call.interrupted:
        print(Colors.FAIL + 'Failed to run: {}'.format(call.last) + Colors.ENDC)
    return succeeded


if __name__ == '__main__':
    import argparse
    import sys
    parser = argparse.ArgumentParser(description='builds the project')
    parser.add_argument('-d', '--debug', action='store_true', help='build the debug flavour instead of release')
    parser.add_argument('-c', '--clean', action='store_true', help='clean the flavour\'s temporary files and the build artifacts before building')
    parser.add_argument('-a', '--all', action='store_true', help='also build the test exectuable, besides the static lib')
    parser.add_argument('-r', '--run', action='store_true', help='if the test exectuable is built, also run it')
    args = parser.parse_args()
    rc = 0 if main(debug=args.debug, clean=args.clean, all=args.all, run=args.run) else -1
    sys.exit(rc)
